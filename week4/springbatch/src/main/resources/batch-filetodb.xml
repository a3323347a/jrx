<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">


        <import resource="classpath:public-batch.xml"/>
        <!--  job-读取txt客户信息并导入数据库-->
        <batch:job id="customerjob">
            <batch:step id="customerstep">
                <batch:tasklet>
                    <batch:chunk reader="customerReader" writer="customerWriter" commit-interval="10000"/>
                </batch:tasklet>
            </batch:step>
            <batch:listeners>
                <batch:listener ref="jobListener"/>
            </batch:listeners>
        </batch:job>

        <!--  job-读取txt交易明细信息并导入数据库-->
        <batch:job id="transdetailjob">
            <batch:step id="transdetailstep">
                <batch:tasklet>
                    <batch:chunk reader="transdetailReader" writer="transdetailWriter" commit-interval="1000"/>
                </batch:tasklet>
            </batch:step>
            <batch:listeners>
                <batch:listener ref="jobListener"/>
            </batch:listeners>
        </batch:job>

        <!--读取txt交易明细信息文件-->
        <bean id="transdetailReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
            <property name="resource" value="data/transdetails.txt"/>
            <!--跳过第一行-->
            <property name="linesToSkip" value="1"/>
            <property name="lineMapper">
                <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                    <property name="lineTokenizer">
                        <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <!--为读取一行数据分配名称，如有多个，则此处多个值 -->
                            <property name="names" value="transId,custId,account,cardnbr,tranno,monthnbr,bill,transtype,txndatetime"/>
                        </bean>
                    </property>
                    <!--根据上面的字段映射成java对象-->
                    <property name="fieldSetMapper">
                        <bean class="com.batch.fieldsetmapper.TransDetailFieldSetMapper"/>
                    </property>
                </bean>
            </property>
        </bean>

        <!--job监听器-->
        <bean id="jobListener" class="com.batch.listener.JobListener"/>

        <!--读取txt客户信息文件-->
        <bean id="customerReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
            <property name="resource" value="data/customer.txt"/>
            <!--跳过第一行-->
             <property name="linesToSkip" value="1"/>
            <property name="lineMapper">
                <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                    <property name="lineTokenizer">
                        <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <!--为读取一行数据分配名称，如有多个，则此处多个值 -->
                            <property name="names" value="custid,surname,gender,educades,mardes,age,address"/>
                        </bean>
                    </property>
                    <!--根据上面的字段映射成java对象-->
                    <property name="fieldSetMapper">
                        <bean class="com.batch.fieldsetmapper.CustomerFieldSetMapper"/>
                    </property>
                </bean>
            </property>
        </bean>
        <!--将客户信息记录写入数据库-->
        <bean id="customerWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
            <property name="dataSource" ref="dataSourceHikari"/>
            <property name="sql" value="insert into customer (cust_id,surname,gender,educa_des,mar_des,age,address)
                        values(:custid,:surname,:gender,:educades,:mardes,:age,:address)"/>
            <property name="itemSqlParameterSourceProvider">
                <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
            </property>
        </bean>

        <!--将交易明细信息记录写入数据库-->
        <bean id="transdetailWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
            <property name="dataSource" ref="dataSourceHikari"/>
            <property name="sql" value="insert into transdetails (trans_id,cust_id,account,card_nbr,tranno,month_nbr,bill,trans_type,txn_datetime)
                        values(:transId,:custId,:account,:cardnbr,:tranno,:monthnbr,:bill,:transtype,:txndatetime)"/>
            <property name="itemSqlParameterSourceProvider">
                <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
            </property>
        </bean>

</beans>